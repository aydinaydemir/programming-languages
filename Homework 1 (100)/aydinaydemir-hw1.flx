%{
    unsigned int numLines = 1;    
%}

DIGIT [0-9]
SIGN [-]?
tNUM ({SIGN}{DIGIT}+|{SIGN}{DIGIT}*\.{DIGIT}+)
tSTRING '[^']*'
tIDENT \"[a-zA-Z_][0-9a-zA-Z_]*\"
tWSPACE [ \t\r\f\v]+



%%
\n numLines++;

\"-\" printf("%d tMINUS\n", numLines);
\""+"\" printf("%d tPLUS\n", numLines);
\""*"\" printf("%d tMUL\n", numLines);
\""++"\" printf("%d tINC\n", numLines);
\">\" printf("%d tGT\n", numLines);
\">=\" printf("%d tGEQ\n", numLines);
\"==\" printf("%d tEQUALITY\n", numLines);
\""/"\" printf("%d tDIV\n", numLines);
\"--\" printf("%d tDEC\n", numLines);
\""<"\" printf("%d tLT\n", numLines);
\""<="\" printf("%d tLEQ\n", numLines);


"[" printf("%d tLBRAC\n", numLines);
"]" printf("%d tRBRAC\n", numLines);
"," printf("%d tCOMMA\n", numLines);

\"Set\" printf("%d tSET\n", numLines);
\"Function\" printf("%d tFUNCTION\n", numLines);
\"Print\" printf("%d tPRINT\n", numLines);
\"Get\" printf("%d tGET\n", numLines);
\"For\" printf("%d tFOR\n", numLines);
\"If\" printf("%d tIF\n", numLines);
\"Return\" printf("%d tRETURN\n", numLines);

{tWSPACE} ;



{tNUM} {
    char originalnum[128];
    int start = 0;
    int end = yyleng - 1;
    int numIsNegative = 0;

    if (yytext[0] == '-'){
        numIsNegative = 1;
        start++;
    }

    // Find first non-zero digit or decimal point
    while (yytext[start] == '0' && yytext[start+1] != '.' && yyleng - start > 1) {
        start++;
    }

    
    // Find last non-zero digit or decimal
    while (yytext[end] == '0' && yytext[end-1] != '.') {
        end--;
    }
    
    char *pos = yytext;
    if ((pos = strchr(pos, '.')) == NULL){
        end = yyleng -1;
    }
    
    strncpy(originalnum, yytext + start, end - start + 1);
    originalnum[end - start + 1] = '\0';

    if (numIsNegative) {
        sprintf(originalnum, "-%.*s", end - start + 1, yytext + start);
    }

    printf("%d tNUM (%s) (%s)\n" , numLines , yytext , originalnum);
}

{tIDENT} {
    char buf[128];
    strncpy(buf, yytext + 1, yyleng - 2);
    buf[yyleng - 2] = '\0';
    printf("%d tIDENT (%s)\n", numLines, buf);
}

{tSTRING} {
    char buf[128];
    strncpy(buf, yytext + 1, yyleng - 2);
    buf[yyleng - 2] = '\0';


    printf("%d tSTRING (%s)\n", numLines, buf);
    char *newline_pos = yytext;
    while ((newline_pos = strchr(newline_pos, '\n')) != NULL) {
        numLines++;
        newline_pos++;
    }

}

. { printf("%d ILLEGAL CHARACTER (%s)\n", numLines, yytext); }



%%

int main() {
    yylex();
    return 0;
}
