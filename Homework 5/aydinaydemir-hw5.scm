(define (if-expr? e)
  (if (list? e)
      (if (= (length e) 4)
          (if (eq? (car e) 'if)
              #t
              #f)
          #f)
      #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (define-stmt? e)
  (cond
    ((not (list? e)) #f)
    ((not (= (length e) 3)) #f)
    ((not (eq? (car e) 'define)) #f)
    ((not (symbol? (cadr e))) #f)
    (else #t)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (cond-expr? e)
  (if (list? e)
      (if (> (length e) 2)
          (if (eq? (car e) 'cond)
              (checkParameters? (cdr e))
              #f)
          #f)
      #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (checkParameters? e)
  (cond
    ((null? e) #f)
    ((not (and (list? (car e)) (= (length (car e)) 2))) #f)
    ((eq? (caar e) 'else) (null? (cdr e)))
    (else (checkParameters? (cdr e)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define whichOperator (lambda (whichOp env)
  (cond
    ((eq? whichOp '+) +)
    ((eq? whichOp '*) *)
    ((eq? whichOp '-) -)
    ((eq? whichOp '/) /)
    (else (let
                  ((tempOprt (display "cs305: ERROR\n\n")))
    (repl env)
                 ) ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (checkLetParams e)
  (cond
    ((not (list? e)) #f)
    ((null? e) #t)
    ((not (and (list? (car e)) (= (length (car e)) 2) (symbol? (caar e)))) #f)
    (else (checkLetParams (cdr e)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (let-expr? e)
  (if (list? e)
      (if (= (length e) 3)
          (if (eq? (car e) 'let)
              (if (list? (cadr e))
                  (checkLetParams (cadr e))
                  #f)
              #f)
          #f)
      #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (letStar-expr? e)
  (if (list? e)
      (if (= (length e) 3)
          (if (eq? (car e) 'let*)
              (if (list? (cadr e))
                  (checkLetParams (cadr e))
                  #f)
              #f)
          #f)
      #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (getValue var env big-env)
  (if (null? env)
      (let
          (
           (tempppp (display "cs305: ERROR\n\n"))
          )
          (repl big-env))
      (if (eq? var (caar env))
          (cdar env)
          (getValue var (cdr env) big-env))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (removeBinding var old-env)
  (if (null? old-env)
      '()
      (if (eq? (caar old-env) var)
          (cdr old-env)
          (cons (car old-env) (removeBinding var (cdr old-env))))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (s7 exprParam env)
  (cond
    ((number? exprParam) exprParam)
    ((symbol? exprParam) (getValue exprParam env env))
    ((not (list? exprParam)) (let
        (
         (tempinmain (display "cs305: ERROR\n\n"))
        )
        (repl env)))
    ((if-expr? exprParam) (if (eq? (s7 (cadr exprParam) env) 0)
                      (s7 (cadddr exprParam) env)
                      (s7 (caddr exprParam) env)))
    ((cond-expr? exprParam) (if (= (length (cdr exprParam)) 2)
                        (if (eq? (s7 (caadr exprParam) env) 0)
                            (s7 (car (cdaddr exprParam)) env)
                            (s7 (cadadr exprParam) env))
                        (if (eq? (s7 (caadr exprParam) env) 0)
                            (s7 (cons (car exprParam) (cddr exprParam)) env)
                            (s7 (cadadr exprParam) env))))
    ((let-expr? exprParam) (let* ((vexprs (map cadr (cadr exprParam)))
                          (valss (map (lambda (expr) (s7 expr env)) vexprs))
                          (anotherVar (map car (cadr exprParam)))
                          (let-env (map cons anotherVar valss))
                          (let-env (append let-env env)))
                     (s7 (caddr exprParam) let-env)))
    ((letStar-expr? exprParam) (if (< (length (cadr exprParam)) 2)
                           (s7 (cons 'let (cdr exprParam)) env)
                           (let* ((startOf (cons 'let (cons (cons (caadr exprParam) '()) '())))
                                  (exprObtained (cons 'let* (cons (cdadr exprParam) '())))
                                  (exprObtained (append exprObtained (cddr exprParam)))
                                  (new-letstar (append startOf (cons exprObtained '()))))
                              (s7 new-letstar env))))
    (else 
      (let
        (
          (operator (whichOperator (car exprParam) env))
          (operands (map (lambda (operand) (s7 operand env)) (cdr exprParam)))
        )
        (apply operator operands)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (repl env)
  (display "cs305> ")
  (let ((expr (read)))
    (let* ((toBeReplaced (if (define-stmt? expr)
                        (changeEnvironment (cadr expr) (s7 (caddr expr) env) env)
                        env))
           (toBePrinted (if (define-stmt? expr)
                    (cadr expr) 
                    (s7 expr env))))
      (display "cs305: ")
      (display toBePrinted)
      (newline)
      (newline)
      (repl toBeReplaced))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (changeEnvironment var val old-env)
  (let ((new-binding (cons var val)))
    (cons new-binding (removeBinding var old-env))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define cs305 (lambda () (repl '())))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;